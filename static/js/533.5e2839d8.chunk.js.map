{"version":3,"file":"static/js/533.5e2839d8.chunk.js","mappings":"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","sources":["components/CustomTextField/CustomTextField.jsx","Pages/LoginForm/LoginForm.jsx"],"sourcesContent":["// CustomTextField.jsx\r\nimport React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n\r\nconst CustomTextField = ({\r\n  name,\r\n  label,\r\n  formik,\r\n  type = 'text',\r\n  showPassword = false,\r\n  handleClickShowPassword,\r\n  handleMouseDownPassword,\r\n}) => {\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      id={name}\r\n      name={name}\r\n      label={label}\r\n      type={type === 'password' && showPassword ? 'text' : type}\r\n      {...formik.getFieldProps(name)}\r\n      error={formik.touched[name] && Boolean(formik.errors[name])}\r\n      helperText={formik.touched[name] && formik.errors[name]}\r\n      InputProps={{\r\n        ...(type === 'password' && {\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n                edge=\"end\"\r\n              >\r\n                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomTextField;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { loadCaptchaEnginge, LoadCanvasTemplate, validateCaptcha } from 'react-simple-captcha';\r\nimport { toast } from 'react-toastify';\r\nimport CustomTextField from '../../components/CustomTextField/CustomTextField';\r\nimport { fetchUsers } from '../../apiConfig';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginSuccess } from \"../../redux/features/userSlice\";\r\nimport { setTasks } from '../../redux/features/taskSlice';\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nconst validationSchema = Yup.object({\r\n  identifier: Yup.string()\r\n    .required('Username or Email is required')\r\n    .test('is-valid-identifier', 'Enter a valid email or username', value => {\r\n      const isValidEmail = Yup.string().email().isValidSync(value);\r\n      const isValidUsername = Yup.string().min(3).max(20).isValidSync(value);\r\n      return isValidEmail || isValidUsername;\r\n    }),\r\n  password: Yup.string()\r\n    .required('Password is required'),\r\n  captcha: Yup.string()\r\n    .required('Captcha is required')\r\n});\r\n\r\nexport default function LoginForm() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handleClickShowPassword = () => setShowPassword(!showPassword);\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      identifier: '',\r\n      password: '',\r\n      captcha: ''\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values) => {\r\n      if (!validateCaptcha(values.captcha)) {\r\n        toast.error('Captcha not Matched');\r\n        return;\r\n      }\r\n      console.log(values);\r\n      try {\r\n         toast.success('Login successful');\r\n        navigate(\"/dashboard\");\r\n        sessionStorage.setItem(\"token\", \"token\")\r\n\r\n        // bypass json-server apis hitting\r\n        // const allUsersInDb = await fetchUsers();\r\n        // // console.log(\"allUsersInDb\",allUsersInDb);\r\n        // const foundUserData = allUsersInDb.find(\r\n        //   (user) =>\r\n        //     (user.email === values.identifier || user.username === values.identifier) &&\r\n        //     user.password === values.password\r\n        // );\r\n        // if (foundUserData) {\r\n        //   // console.log(foundUserData,\"foundUserData\")\r\n        //   toast.success('Login successful');\r\n        //   navigate(\"/dashboard\");\r\n        //   sessionStorage.setItem(\"token\", \"token\")\r\n        //   dispatch(loginSuccess(foundUserData))\r\n        //   dispatch(setTasks(foundUserData?.tasks))\r\n\r\n        // } else {\r\n        //   const existingUser = allUsersInDb.find((user) => user.email === values.identifier || user.username === values.identifier);\r\n        //   if (existingUser) {\r\n        //     toast.error('Invalid password');\r\n        //   } else {\r\n        //     toast.error('User not found');\r\n        //   }\r\n        // }\r\n      } catch (error) {\r\n        toast.error('An error occurred while trying to log in');\r\n        console.error('Login error:', error);\r\n      }\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadCaptchaEnginge(6);\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\" sx={{ mt: 3, mb: 2 }}>\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Log-in\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={formik.handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <CustomTextField\r\n                  name=\"identifier\"\r\n                  label=\"Username or Email\"\r\n                  formik={formik}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <CustomTextField\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  formik={formik}\r\n                  type=\"password\"\r\n                  showPassword={showPassword}\r\n                  handleClickShowPassword={handleClickShowPassword}\r\n                  handleMouseDownPassword={handleMouseDownPassword}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <LoadCanvasTemplate reloadText=\"Reload Captcha\" reloadColor=\"red\" />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <CustomTextField\r\n                  name=\"captcha\"\r\n                  label=\"Enter Captcha Value\"\r\n                  formik={formik}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Login\r\n            </Button>\r\n            <Grid container justifyContent=\"center\">\r\n              <Grid item>\r\n                <Link to=\"/register\">\r\n                  Don't have an account? Sign Up\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n"],"names":["_ref","name","label","formik","type","showPassword","handleClickShowPassword","handleMouseDownPassword","_jsx","TextField","fullWidth","id","getFieldProps","error","touched","Boolean","errors","helperText","InputProps","endAdornment","InputAdornment","position","children","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","defaultTheme","createTheme","validationSchema","Yup","identifier","required","test","value","isValidEmail","email","isValidSync","isValidUsername","min","max","password","captcha","LoginForm","useDispatch","navigate","useNavigate","setShowPassword","useState","useFormik","initialValues","onSubmit","async","validateCaptcha","values","console","log","toast","success","sessionStorage","setItem","useEffect","loadCaptchaEnginge","ThemeProvider","theme","_jsxs","Container","component","maxWidth","sx","mt","mb","CssBaseline","Box","marginTop","display","flexDirection","alignItems","Typography","variant","handleSubmit","Grid","container","spacing","item","xs","CustomTextField","event","preventDefault","LoadCanvasTemplate","reloadText","reloadColor","Button","justifyContent","Link","to"],"sourceRoot":""}